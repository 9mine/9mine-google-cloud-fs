image: 
  repository: 9mine/9mine-google-cloud-fs
  tag: "main"
  pullPolicy: Always

initContainerImage:
  repository: 9mine/execfuse-jinja2
  tag: "master"
  pullPolicy: Always

securityContext: 
  privileged: true
  capabilities:
    add:
      - SYS_ADMIN

service:
  type: ClusterIP
  port: 2700
  
ClusterIPRange:
    from: 2701
    to: 2720

description: "googlecloudfs"

fs: |
    {% include './common.j2' %}
    fs:
      # root
      "/":
        <<: *is_dir
        readdir: 
          sh: ls /accounts
          # /<id>
        "/[0-9]+":
          <<: *is_dir
          name: id
          readdir: 
            list: 
            - compute
          # /<id>/.console.lua
          "/.console.lua":
            <<: *is_file
            read_file: 
              sh: |
                cat <<EOF
                   class "gcloud_cmdchan"("cmdchan")

                   function gcloud_cmdchan:gcloud_cmdchan(connection, cmdchan_path)
                       cmdchan:cmdchan(connection, cmdchan_path)
                   end

                   function gcloud_cmdchan:write(command)
                       local conn = self.connection.conn
                       local f = conn:newfid()
                       print("Write " .. command .. " to " .. self.cmdchan_path)
                       conn:walk(conn.rootfid, f, self.cmdchan_path)
                       conn:open(f, 1)
                       local buf = data.new(command)
                       conn:write(f, 0, buf)
                       conn:clunk(f)
                   end

                   function gcloud_cmdchan:execute(command, location)
                       local tmp_file = "/n/cmdchan/cmdchan_output"
                       pcall(gcloud_cmdchan.write, self, command, location)
                       return select(2, pcall(gcloud_cmdchan.read, self, tmp_file))
                   end
                   connection:set_cmdchan(gcloud_cmdchan(connection, core_conf:get("cmdchan_path")))
                   local tx_name = "9mine-google-cloud-fs.png"
                   texture.download("https://cloudacademy.com/wp-content/uploads/2014/04/ComputeEngine_512px-300x300.png", true,
                       "9mine-google-cloud-fs.png", "9mine-google-cloud-fs")
                   entity:set_properties({
                       visual = "cube",
                       textures = {tx_name, tx_name, tx_name, tx_name, tx_name, tx_name}
                   })
                   entity:get_luaentity().on_punch = function(self, player)
                       local p = self.object:get_pos()
                       local pos = minetest.serialize(p)
                       local request = ""
                       minetest.show_formspec(player:get_player_name(), "gcloud:console",
                           table.concat({"formspec_version[4]", "size[13,13,false]",
                                         "textarea[0.5,0.5;12.0,10;;;" .. minetest.formspec_escape(self.output) .. "]",
                                         "field[0.5,10.5;12,1;input;;]", "field_close_on_enter[input;false]",
                                         "button[10,11.6;2.5,0.9;send;send]",
                                         "field[13,13;0,0;entity_pos;;" .. minetest.formspec_escape(pos) .. "]"}, ""))
                   end

                   local function gcloud_console(player, formname, fields)
                       if formname == "gcloud:console" then
                           if not (fields.key_enter or fields.send) then
                               return
                           end
                           local player_name = player:get_player_name()
                           local pos = minetest.deserialize(fields.entity_pos)
                           local lua_entity = select(2, next(minetest.get_objects_inside_radius(pos, 0.5))):get_luaentity()
                           local cmdchan = connections:get_connection(player_name, lua_entity.addr):get_cmdchan()
                           cmdchan:write(fields.input:gsub("^gcloud ", ""))
                           minetest.show_formspec(player_name, "gcloud:console",
                               table.concat({"formspec_version[4]", "size[13,13,false]", "textarea[0.5,0.5;12.0,10;;;",
                                             minetest.formspec_escape("Please, wait for response"), "]", "field[0.5,10.5;12,1;input;;]",
                                             "field_close_on_enter[input;false]"}, ""))
                           minetest.after(3, function()
                               local function show_output()
                                   local result, response = pcall(cmdchan.read, cmdchan, "/n/cmdchan/cmdchan_output")
                                   if not result then
                                       minetest.after(3, show_output)
                                       return
                                   end
                                   lua_entity.output = fields.input .. ": \n" .. response .. "\n" .. lua_entity.output
                                   minetest.show_formspec(player_name, "gcloud:console",
                                       table.concat({"formspec_version[4]", "size[13,13,false]", "textarea[0.5,0.5;12.0,10;;;",
                                                     minetest.formspec_escape(lua_entity.output), "]", "field[0.5,10.5;12,1;input;;]",
                                                     "field_close_on_enter[input;false]", "button[10,11.6;2.5,0.9;send;send]",
                                                     "field[13,13;0,0;entity_pos;;", minetest.formspec_escape(fields.entity_pos), "]"}, ""))
                               end
                               show_output()
                           end)
                       end
                   end

                   register.add_form_handler("gcloud:console", gcloud_console)
           
                EOF
          # /<id>/.init.lua
          "/.init.lua":
            <<: *is_file
            read_file: 
              sh: |
                cat <<EOF
                   class "gcloud_cmdchan"("cmdchan")

                   function gcloud_cmdchan:gcloud_cmdchan(connection, cmdchan_path)
                       cmdchan:cmdchan(connection, cmdchan_path)
                   end

                   function gcloud_cmdchan:write(command)
                       local conn = self.connection.conn
                       local f = conn:newfid()
                       print("Write " .. command .. " to " .. self.cmdchan_path)
                       conn:walk(conn.rootfid, f, self.cmdchan_path)
                       conn:open(f, 1)
                       local buf = data.new(command)
                       conn:write(f, 0, buf)
                       conn:clunk(f)
                   end

                   function gcloud_cmdchan:execute(command, location)
                       local tmp_file = "/n/cmdchan/cmdchan_output"
                       pcall(gcloud_cmdchan.write, self, command, location)
                       return select(2, pcall(gcloud_cmdchan.read, self, tmp_file))
                   end
                   platform.cmdchan = gcloud_cmdchan(platform.connection, core_conf:get("cmdchan_path"))
                   local function set_texture(entry, entity)
                       local prefix = init_path:match("/$") and init_path:sub(1, -2) or init_path
                       if not prefix then
                           return
                       end
                       if entry.platform_string == prefix .. "/compute/instances/describe" then
                           texture.download("https://cloudacademy.com/wp-content/uploads/2014/04/ComputeEngine_512px-300x300.png", true,
                               "9mine-google-cloud-fs.png", "9mine-google-cloud-fs")
                           entity:set_properties({
                               visual = "cube",
                               textures = {"9mine-google-cloud-fs.png", "9mine-google-cloud-fs.png", "9mine-google-cloud-fs.png",
                                           "9mine-google-cloud-fs.png", "9mine-google-cloud-fs.png", "9mine-google-cloud-fs.png"}
                           })
                       end
                   end
                   register.add_texture_handler(init_path .. "9mine-google-cloud-fs-set-texture", set_texture)
                     local function gcloud_message_handler(player_name, message)
                       if message:match("^gcloud ") then
                           local player = minetest.get_player_by_name(player_name)
                           local player_graph = graphs:get_player_graph(player_name)
                           local platform = player_graph:get_platform(common.get_platform_string(player))
                           if not platform then
                               return false
                           end
                           local cmdchan = platform:get_cmdchan()
                           if not cmdchan then
                               return
                           end
                           message = message:gsub("^gcloud ", "")

                           cmdchan:write(message)
                           minetest.after(1, function()
                               local result, response = pcall(cmdchan.read, cmdchan, "/n/cmdchan/cmdchan_output")
                               cmdchan.show_response(response, player_name)
                               if not result then
                                   minetest.after(2, function()
                                       result, response = pcall(cmdchan.read, cmdchan, "/n/cmdchan/cmdchan_output")
                                       cmdchan.show_response(response, player_name)
                                   end)
                                   return
                               end
                           end)
                           return true
                       end
                   end

                   register.add_message_handler(init_path .. "gcloud_message_handler", gcloud_message_handler)
          
                EOF
          "/n":
            <<: *is_dir
            "/cmdchan":
              <<: *is_dir
              "/cmdchan_output":
                getattr: 
                  sh: (ls /accounts/$id/output >> /dev/null 2>&1 && echo 'ino=1 mode=-rwxr-xr-x nlink=1 uid=0 gid=0 rdev=0 size=0 blksize=512 blocks=2 atime=0 mtime=0 ctime=0 ')
                read_file:
                  sh: cat /accounts/$id/output
              "/chan":
                <<: *is_dir
                "/cmd":
                  <<: *is_file
                  write_file:
                    sh: |
                        str=`cat $CACHE_FILE_NAME`
                        rm -f /accounts/$id/output
                        eval "gcloud --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` $str" > /accounts/$id/out 2>&1
                        cp /accounts/$id/out /accounts/$id/output
                
          # /<id>/compute
          "/compute":
            <<: *is_dir
            readdir:
              list: 
              - instances
              # /<id>/compute/instances
            "/instances":
              <<: *is_dir
              readdir:
                list: 
                - list
                - describe 
              # /<id>/compute/instances/list
              "/list":
                <<: *is_file
                read_file:
                  sh:  gcloud compute instances list --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` --zones=`cat /accounts/${id}/zone`
              # /<id>/compute/instances/describe   
              "/describe":
                <<: *is_dir
                readdir: 
                  sh: gcloud compute instances list --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` --zones=`cat /accounts/${id}/zone` --format=json | jq -r '.[].name'
                # /<id>/compute/instances/describe/<compute_name>
                "/[a-z0-9_-]+":
                  <<: *is_dir
                  name: compute_name
                  readdir: 
                    sh: gcloud compute instances describe ${compute_name} --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` --zone=`cat /accounts/${id}/zone` --format=json | jq -r 'keys[]' 
                  # /<id>/compute/instances/describe/<compute_name>/<attribute>
                  "/[a-zA-Z0-9_-]+":
                    name: attribute
                    read_file: 
                      sh: gcloud compute instances describe "${compute_name}" --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` --zone=`cat /accounts/${id}/zone` --format=json | jq '.'${attribute}''
                    <<: *is_file


profile: |
    echo --- start of profile loading ---
    load file2chan
    load std
    ndb/cs
    for host_var in `{ os env } { '{'$host_var'}' }
    
    dir = $EXPORT_PATH
    port = $NINEP_PUBLIC_PORT
    echo $NINEP_PUBLIC_HOST > /dev/sysname 

    test -d /mnt/registry || mkdir -p /mnt/registry
    mount -A tcp!registry!registry /mnt/registry

    GCLOUD_DIR = /tmp/gcloud/cmd
    test -d $GCLOUD_DIR || mkdir -p $GCLOUD_DIR
    chmod a+rwx $GCLOUD_DIR
    load mpexpr
    fs_port = ${expr $NINEP_PUBLIC_PORT 1 +}

    file2chan $GCLOUD_DIR^/gcloud {} {
        load mpexpr
        var=${expr 10 rand}

        echo new id is $var
        echo hostname is `{os hostname}

        (key project zone) = `{echo ${rget data}} 

        `{os /bin/bash -c 'mkdir -p /accounts/'^$var}
        `{os /bin/bash -c 'echo '^$key^' | base64 -d > /accounts/'^$var^'/key'}
        `{os /bin/bash -c 'gcloud auth activate-service-account --key-file /accounts/'^$var^'/key --quiet'}
        `{os /bin/bash -c 'cat /accounts/'^$var^'/key | jq -r .client_email > /accounts/'^$var^'/email'}
        `{os /bin/bash -c 'echo '^$project^' > /accounts/'^$var^'/project'}
        `{os /bin/bash -c 'echo '^$zone^' > /accounts/'^$var^'/zone'}
        
        grid/reglisten -A -r description 'user id is '^$var tcp!*!^$fs_port { export $dir^/^$var & } &
        fs_port=${expr $fs_port 1 +}
    }
        
    grid/reglisten -A -r description ${quote $NINEP_DESCRIPTION} 'tcp!*!'^$port { export $GCLOUD_DIR & }
    test -n $status && os pkill -9 emu-g
    echo --- end of profile loading ---
