image: 
  repository: 9mine/9mine-google-cloud-fs
  tag: "main"
  pullPolicy: Always

initContainerImage:
  repository: 9mine/execfuse-jinja2
  tag: "master"
  pullPolicy: Always

securityContext: 
  privileged: true
  capabilities:
    add:
      - SYS_ADMIN

service:
  type: ClusterIP
  port: 2700
  
ClusterIPRange:
    from: 2701
    to: 2720

description: "googlecloudfs"

fs: |
    {% include './common.j2' %}
    fs:
      # root
      "/":
        readdir: 
          sh: ls /accounts
        getattr:
          sh: *dir 
          # /<id>
        "/[0-9]+":
          name: id
          readdir: 
            list: 
            - compute
          getattr: 
              sh: *dir
          # /<id>/.init.lua
          "/.init.lua":
            getattr:
              sh: *file
            read_file: 
              sh: |
                cat <<EOF
                   local function set_texture(entry, entity)
                       local prefix = init_path:match("/$") and init_path:sub(1, -2) or init_path
                       if not prefix then
                           return
                       end
                       if entry.platform_string == prefix .. "/compute/instances/describe" then
                           texture.download("https://cloudacademy.com/wp-content/uploads/2014/04/ComputeEngine_512px-300x300.png", true,
                               "9mine-google-cloud-fs.png", "9mine-google-cloud-fs")
                           entity:set_properties({
                               visual = "cube",
                               textures = {"9mine-google-cloud-fs.png", "9mine-google-cloud-fs.png", "9mine-google-cloud-fs.png",
                                           "9mine-google-cloud-fs.png", "9mine-google-cloud-fs.png", "9mine-google-cloud-fs.png"}
                           })
                       end
                   end
                   register.add_texture_handler(init_path .. "9mine-google-cloud-fs-set-texture", set_texture)

                   class "gcloud_cmdchan"("cmdchan")

                   function gcloud_cmdchan:gcloud_cmdchan(connection, cmdchan_path)
                       cmdchan:cmdchan(connection, cmdchan_path)
                   end

                   function gcloud_cmdchan:write(command)
                       local conn = self.connection.conn
                       local f = conn:newfid()
                       print("Write " .. command .. " to " .. self.cmdchan_path)
                       conn:walk(conn.rootfid, f, self.cmdchan_path)
                       conn:open(f, 1)
                       local buf = data.new(command)
                       conn:write(f, 0, buf)
                       conn:clunk(f)
                   end

                   function gcloud_cmdchan:execute(command, location)
                       local tmp_file = "/n/cmdchan/cmdchan_output"
                       pcall(gcloud_cmdchan.write, self, command, location)
                       return select(2, pcall(gcloud_cmdchan.read, self, tmp_file))
                   end
                   platform.cmdchan = gcloud_cmdchan(platform.connection, core_conf:get("cmdchan_path"))

                   local function gcloud_message_handler(player_name, message)
                       if message:match("^gcloud ") then
                           local player = minetest.get_player_by_name(player_name)
                           local player_graph = graphs:get_player_graph(player_name)
                           local platform = player_graph:get_platform(common.get_platform_string(player))
                           if not platform then
                               return false
                           end
                           local cmdchan = platform:get_cmdchan()
                           if not cmdchan then
                               return
                           end
                           message = message:gsub("^gcloud ", "")

                           cmdchan:write(message)
                           minetest.after(1, function()
                               local result, response = pcall(cmdchan.read, cmdchan, "/n/cmdchan/cmdchan_output")
                               cmdchan.show_response(response, player_name)
                               if not result then
                                   minetest.after(2, function()
                                       result, response = pcall(cmdchan.read, cmdchan, "/n/cmdchan/cmdchan_output")
                                       cmdchan.show_response(response, player_name)
                                   end)
                                   return
                               end
                           end)
                           return true
                       end
                   end

                   register.add_message_handler(init_path .. "gcloud_message_handler", gcloud_message_handler)
          

                EOF
          "/n":
            <<: *is_dir
            "/cmdchan":
              <<: *is_dir
              "/cmdchan_output":
                getattr: 
                  sh: (ls /accounts/$id/output >> /dev/null 2>&1 && echo 'ino=1 mode=-rwxr-xr-x nlink=1 uid=0 gid=0 rdev=0 size=0 blksize=512 blocks=2 atime=0 mtime=0 ctime=0 ')
                read_file:
                  sh: cat /accounts/$id/output
              "/chan":
                <<: *is_dir
                "/cmd":
                  <<: *is_file
                  write_file:
                    sh: |
                        str=`cat $CACHE_FILE_NAME`
                        rm -f /accounts/$id/output
                        eval "gcloud --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` $str" > /accounts/$id/out 2>&1
                        cp /accounts/$id/out /accounts/$id/output
                
          # /<id>/compute
          "/compute":
            readdir:
              list: 
              - instances
            getattr:
              sh: *dir
              # /<id>/compute/instances
            "/instances":
              readdir:
                list: 
                - list
                - describe 
              getattr:
                sh: *dir 
              # /<id>/compute/instances/list
              "/list":
                read_file:
                  sh:  gcloud compute instances list --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` --zones=`cat /accounts/${id}/zone`
                getattr: 
                  sh: *file 
              # /<id>/compute/instances/describe   
              "/describe":
                getattr: 
                  sh: *dir
                readdir: 
                  sh: gcloud compute instances list --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` --zones=`cat /accounts/${id}/zone` --format=json | jq -r '.[].name'
                # /<id>/compute/instances/describe/<compute_name>
                "/[a-z0-9_-]+":
                  name: compute_name
                  readdir: 
                    sh: gcloud compute instances describe ${compute_name} --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` --zone=`cat /accounts/${id}/zone` --format=json | jq -r 'keys[]' 
                  getattr:
                    sh: *dir
                  # /<id>/compute/instances/describe/<compute_name>/<attribute>
                  "/[a-zA-Z0-9_-]+":
                    name: attribute
                    read_file: 
                      sh: gcloud compute instances describe "${compute_name}" --account=`cat /accounts/${id}/email` --project=`cat /accounts/${id}/project` --zone=`cat /accounts/${id}/zone` --format=json | jq '.'${attribute}''
                    getattr: 
                      sh: *file

profile: |
    echo --- start of profile loading ---
    load file2chan
    load std
    ndb/cs
    for host_var in `{ os env } { '{'$host_var'}' }
    
    dir = $EXPORT_PATH
    port = $NINEP_PUBLIC_PORT
    echo $NINEP_PUBLIC_HOST > /dev/sysname 

    test -d /mnt/registry || mkdir -p /mnt/registry
    mount -A tcp!registry!registry /mnt/registry

    GCLOUD_DIR = /tmp/gcloud/cmd
    test -d $GCLOUD_DIR || mkdir -p $GCLOUD_DIR
    chmod a+rwx $GCLOUD_DIR
    load mpexpr
    fs_port = ${expr $NINEP_PUBLIC_PORT 1 +}

    file2chan $GCLOUD_DIR^/gcloud {} {
        load mpexpr
        var=${expr 10 rand}

        echo new id is $var
        echo hostname is `{os hostname}

        (key project zone) = `{echo ${rget data}} 

        `{os /bin/bash -c 'mkdir -p /accounts/'^$var}
        `{os /bin/bash -c 'echo '^$key^' | base64 -d > /accounts/'^$var^'/key'}
        `{os /bin/bash -c 'gcloud auth activate-service-account --key-file /accounts/'^$var^'/key --quiet'}
        `{os /bin/bash -c 'cat /accounts/'^$var^'/key | jq -r .client_email > /accounts/'^$var^'/email'}
        `{os /bin/bash -c 'echo '^$project^' > /accounts/'^$var^'/project'}
        `{os /bin/bash -c 'echo '^$zone^' > /accounts/'^$var^'/zone'}
        
        grid/reglisten -A -r description 'user id is '^$var tcp!*!^$fs_port { export $dir^/^$var & } &
        fs_port=${expr $fs_port 1 +}
    }
        
    grid/reglisten -A -r description ${quote $NINEP_DESCRIPTION} 'tcp!*!'^$port { export $GCLOUD_DIR & }
    test -n $status && os pkill -9 emu-g
    echo --- end of profile loading ---
